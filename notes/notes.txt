    Workflow File Tasks:
    testing your code
    sending a slack message
    publishing a package
    openeing an issue 
    deploying applications

Events:
  Repos events: push pullm request, issue
  external events: sending a POST request to a REST API
  Schedule Time:
  MAnually: pressing the run workflow button
Events are the triggers that start your workflows. These could be activities like pushing code to a repository, creating a pull request, or scheduling a time-based event. Some common events include:
    push: Triggered when code is pushed to a repository.
    pull_request: Triggered when a pull request is created or updated.
    schedule: Triggered based on a cron schedule.
    workflow_dispatch: Manually triggered by a user.


Runner MAchine:
  github hosted runners : win, linux, macos with tools installed
  self hosted runners: more customizable, more control over hardware, install packages.
  large runners: with more RAM & CPU

* JOB runs on the Runner MAchine
* JOBS can run parallel
* Actions are the individual tasks that make up your jobs
* also can schedule

YAML Format
    is superset of json
    * key: value
    * "key with quotes" : "value within quotes"     --> are permitted
    * special_chars: "special: characters"
    * excape characters --> "\u263A \u263B \n"    --> have to be in double quotes
    * array:
        - item1
        - item2
    * json array: [item1,item2]
    * numbers: 100
    * boolean: true/false
    * null =  null
    * also_null = ~
    
    * object (maps):
        key:value
        another: value
        nested_object:
            nested_key: value

    * json style object
    * sequence:
        - item1
        - item2
        - 0.5   --> numvber
        - key : value
          another_key: value
        - - nested array item
          - nested array item2
    * literal block: |
        first line

        second line
    * folded block: >
        first line
        second line

-------------------------------------------------------------------

###first workbook:
LOCATION:     .github/workflows/workflowFile1.yaml
>>>>

name: First Workflow
on: [push]                                                   #the events to be triggered

on:                                                          # this on when the push is directed to be on specific branch (here main)
    push:
        branch:
            - main
defualts:
    run:
        shell: bash                                           # defining a default shell, runs-on, working dir, for all the jobs
        working-directory: <if we want an custom or required location>

jobs:                                                        # jobs array with job object having 'jobs' as key
    run-shell-commands:                                      # job no. 1 this is a job objedct in here we will be defining steps, platform or os to run our job 
        runs-on: ubuntu-latest                               #defining platform    
        steps:                        #now we will defining the steps
            - name: echo a string                            # object for each steps containig a name, defining what to do here echo a string 
               run: echo "hello World"                       # now the shell command to perform the task
            - name: multiline commands
              run: |                                         #  | pipe character to define multiple lines of commands
                node -v            #just checking the version
                npm -v

            - name: just to check working directory before
              run: pwd
            
            - name: changing Working directory               # to change the working dir it can be default, or specific to the job,or task
              working-directory: /home/runner             # any location from pwd
              run: |
                pwd

    parallel-job:                                            #job no. 2
        runs-on: macos-latest
        steps:
            - name: view SW version                            # some macos specific tasks and commands
              run: sw_vers
    dependent-job:                                            #job no. 3
        runs-on: windows-latest
        defaults:
            run:
                shell: pwsh                                   # definign the default shell to run the job, here pwsh = powershell
        
            needs: run-shell-commands                             #this key is added to make the job dependent on another ... it can have job-id or [array of job id]
        steps:
            - name: echo a string
              run: Write-Output "Windows String dependent on run-shell-commands job"
            - name: this is an error task, command not correct
              run: doesnotexists                             # incorrect command to get an error
              
            - name: github env values
              run: |
                Get-Location
                dir
                Write-Output $env:GITHUB_SHA
                Write-Output $env:GITHUB_REPOSITORY
                Write-Output $env:GITHUB_WORKSPACE
    
-------------------------------------------------------------------

multiple jobs:
    * we can run jobs, parallel, independent, or be configured to be dependent
    * runs on their own runner macine

    
-------------------------------------------------------------------    

Visua;ization & manage of github workflows-->

--> Github WepApp UI
    * can disable the run of workflow, ( like even if on:[push] and file is updated, it will prevent workflow from running.)
    * option to re-run all jobs, failed jobs, we can check the enable debug logging to display more debug info
    



--> Github CLI   (brew install gh)
    commands:     
            * gh workflow view "<name of workflow>"    here "first Workflow"
              will provide with workflow file name, id, total runs counr, recent runs, success, pending, failed.
            * gh workflow list
            * gh workflow disable "<name of workflow>"
            * gh workflow enable "<name of workflow>"
            ****
            SET github hosted runners
            * rightclick repo, open > goto the organization > settings > actions > runners > github hosted runners > can monitor currently running jobs
            

-------------------------------------------------------------------    

Debuging the workflow
    from the logs
    note the helpfuls-->
            * use the search bar
            * if clicked onthe line will get embedded in the url can be shared
            * download log files
            * enabling debug logging
        * REPO settings > secrets and vaiables > variable = "ACTIONS_STEP_DEBUG" value = "true"
        * secrets and vairables > variable= "ACTIONS_RUNNER_DEBUG"  value = true
        * these will add more logs to our log archive and log files
        * 
    
-------------------------------------------------------------------    
*****
Skip Workflow to run
    if in commit message
    git commit -m "message [The_string]"
    [The_string] = actions skip, skip ci, ci skip, no ci
    if this is the message with the string, it will skip the run of the recent commit.


***** 
WORKFLOW COMMANDS:

?>>>>
name: Workflow Commands
on: [push]

jobs:
    testing-wf-commands:                #1st job
        runs-on: ubuntu-latest
        steps:     
            - name: Setting an error message        
              run: echo "::error::Missing semicolon"        #::error:: is the code to display error message. This does not let the workflow fail.
            - name: setting error message with parameters
              run: echo "::error title:Error title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<Errormessage>"                                            #the error message can be = missing semicolon   -->these are all just echos, to let run the workflow. In this task of the job we are declaring 
            - name: setting debug message with parameters
              run: echo "::debug title:debug title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<DebugMessage>"
            - name: setting warning message with parameters
              run: echo "::warning title:warning title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<WarningMessage>"
            - name: setting notice message with parameters
              run: echo "::notice title:notice title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<NoticeMessage>" 
              
            - name: group of logs                                          #to display group of messages,
               run: |
                echo "::group::My group title"
                echo "Inside group"
                echo "::endgroup::"                                        #this is the end, so whatever in between group and endgroup can be seen from dropdown in github webapp logs.
            - name: masking a value                                                 # like masking a string that is sensitive and not to be displayed in logs
              run: echo "::add-mask::Secret String here"
            - name: Echo the secret string
              run: echo "Secret String here"

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    




