
>>>>>
What is github actions:
    a tool that lets you automate software development workflows 

>>>>>
workflow:
    are configurable, automated processes, setup in the repo, to perform certain task, 
    Workflow File Tasks:
        testing your code
        sending a slack message
        publishing a package
        sending a slack message
        openeing an issue 
        deploying applications
>>>>>
A workflow can contain one or more jobs and each job can have multiple steps.


------------------------------------------------------------------- 

Events:
  Repos events: push pullm request, issue
  external events: sending a POST request to a REST API
  Schedule Time:
  Manually: pressing the run workflow button
---------------------------------------------------------------------------------
Events are the triggers that start your workflows. These could be activities like pushing code to a repository, creating a pull request, or scheduling a time-based event. Some common events include:
    1. push: Triggered when code is pushed to a repository.
        by default will run on all push
        can be made specific for branches
        >>>    on:
                    push:
                        branch:
                            - main





    2. pull_request: Triggered when a pull request is created or updated.
        by default this also run the workflow for all pull requests but can be specified for specified types
        >>>    on:    
                    pull_request:
                        types: [ assigned, openend, review_request_removed, closed, .....]


    3. Issues: triggered when opereations happen on the issue, a feature to traclk task, enhancements, a board to put some ideas, basically git area used to share not only code but conversations about the code, new feature to be integrated....
        >>>    on:         
                    issues:
                        types: [opened, assigned....]
    


    4. pull_request_target:
        similar to pull request events but are triggered  on base branch of pull request, are useful for actions that needs to access the base branch
        >>>    on:
                    pull_request_target:
                        types: [opened]
    
    5. schedule: Triggered based on a cron schedule.
    workflow_dispatch: Manually triggered by a user.



---------------------------------------------------------------------------------
Runner MAchine:
  github hosted runners : win, linux, macos with tools installed
  self hosted runners: more customizable, more control over hardware, install packages.
  large runners: with more RAM & CPU

* JOB runs on the Runner Machine
* JOBS can run parallel
* Actions are the individual tasks that make up your jobs
* also can schedule

ACTIONS::
    we use run keys in the jobs to run simple commands
    in order to run more complex tasks , we use actions
  

***  SO the ACtions in GH ACtions is a reusabele unit of code that can be refernced, in order to execute that action 
     using actions do things -->
        interacting with github API
        some other API
        deploy code
        send sms
        send slack message

TYPES:
    1. javascript actions: runs directly in runner machine, and on all os
    2. Actions written in Docker: freedom to write action in any language, and use any tool, are little but slower
        need to pull and build docker container into your machine
    3. composite actions: combine multiple workflow steps into actions
-------------------------------------------------------------------    

YAML Format
    is superset of json
    * key: value
    * "key with quotes" : "value within quotes"     --> are permitted
    * special_chars: "special: characters"
    * excape characters --> "\u263A \u263B \n"      --> have to be in double quotes
    * array:
        - item1
        - item2
    * json array: [item1,item2]
    * numbers: 100
    * boolean: true/false
    * null =  null
    * also_null = ~
    
    * object (maps):
        key:value
        another: value
        nested_object:
            nested_key: value

    * json style object
    * sequence:
        - item1
        - item2
        - 0.5   --> numvber
        - key : value
          another_key: value
        - - nested array item
          - nested array item2
    * literal block: |
        first line

        second line
    * folded block: >
        first line
        second line

-------------------------------------------------------------------

GITHUB ENV VARIABLES

$env:GITHUB_SHA ==> to access on windows pwsh can do Write-Output $env:GITHUB_SHA

$GITHUB_SHA
$GITHUB_REPOSITORY
$GITHUB_WORKSPACE
$GITHUB_ACTOR  ==> github username
secrets.GITHUB_TOKEN  ==> saved in secrets the github token used for a token genreated when we are using github actions
>>>>> can get the github repo url by this -->
        " https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git "

------------------------------------------------------------------- 
------------------------------------------------------------------- 
------------------------------------------------------------------- 

###first workbook:
LOCATION:     .github/workflows/workflowFile1.yaml
>>>>

name: First Workflow
on: [push]                                                   #the events to be triggered

on:                                                          # this on when the push is directed to be on specific branch (here main)
    push:
        branch:
            - main
on: 
    schedule:
        - cron: '0 0 * * *'                                # runs at midnight UTC every day
        - cron: "0 2 * * 1-5"                              # every day of the week from Monday to Friday at 2:00 UTC
        
defualts:
    run:
        shell: bash                                           # defining a default shell, runs-on, working dir, for all the jobs
        working-directory: <if we want an custom or required location>

jobs:                                                        # jobs array with job object having 'jobs' as key
    run-shell-commands:                                      # job no. 1 this is a job objedct in here we will be defining steps, platform or os to run our job 
        runs-on: ubuntu-latest                               #defining platform    
        steps:                                               #now we will defining the steps
            - name: echo a string                            # object for each steps containig a name, defining what to do here echo a string 
              run: echo "hello World"                        # now the shell command to perform the task
            - name: multiline commands
              run: |                                         #  | pipe character to define multiple lines of commands
                node -v            #just checking the version
                npm -v

            - name: just to check working directory before
              run: pwd
            
            - name: changing Working directory               # to change the working dir it can be default, or specific to the job,or task
              working-directory: /home/runner             # any location from pwd
              run: |
                pwd

    parallel-job:                                            #job no. 2
        runs-on: macos-latest
        steps:
            - name: view SW version                            # some macos specific tasks and commands
              run: sw_vers
    dependent-job:                                            #job no. 3
        runs-on: windows-latest
        defaults:
            run:
                shell: pwsh                                   # definign the default shell to run the job, here pwsh = powershell
        
            needs: run-shell-commands                         #this key is added to make the job dependent on another ... it can have job-id or [array of job id]
        steps:
            - name: echo a string
              run: Write-Output "Windows String dependent on run-shell-commands job"
            - name: this is an error task, command not correct
              run: doesnotexists                             # incorrect command to get an error
              
            - name: github env values
              run: |
                Get-Location
                dir
                Write-Output $env:GITHUB_SHA
    build:                                                    #  A build job
        runs-on: ubuntu-latest
        strategy:                                             # the strategy is defined to control the behaviour of job to get retire  because if it fails in multiple attempts the workflow status marked as failed, >> can configure the workflow to stop all further job executions if a job fails multiple times, or to continue trying other jobs even if one fails.
        fail-fast: false
        matrix:
            include:
                - node-version: 14
                - node-version: 16
        steps:
          - name: Checkout repository
            uses: actions/checkout@v2
    
          - name: Set up Node.js ${{ matrix.node-version }}
            uses: actions/setup-node@v2
            with:
              node-version: ${{ matrix.node-version }}
    
          - name: Install dependencies
            run: npm install
    
          - name: Run tests
            run: npm test
                
-------------------------------------------------------------------

multiple jobs:
    * we can run jobs, parallel, independent, or be configured to be dependent
    * runs on their own runner macine

    
-------------------------------------------------------------------    

Visua;ization & manage of github workflows-->

--> Github WepApp UI
    * can disable the run of workflow, ( like even if on:[push] and file is updated, it will prevent workflow from running.)
    * option to re-run all jobs, failed jobs, we can check the enable debug logging to display more debug info
    



--> Github CLI   (brew install gh)
    commands:     
            * gh workflow view "<name of workflow>"    here "first Workflow"
              will provide with workflow file name, id, total runs counr, recent runs, success, pending, failed.
            * gh workflow list
            * gh workflow disable "<name of workflow>"
            * gh workflow enable "<name of workflow>"
            ****
            SET github hosted runners
            * rightclick repo, open > goto the organization > settings > actions > runners > github hosted runners > can monitor currently running jobs
            

-------------------------------------------------------------------    

Debuging the workflow
    from the logs
    note the helpfuls-->
            * use the search bar
            * if clicked onthe line will get embedded in the url can be shared
            * download log files
            * enabling debug logging
        * REPO settings > secrets and vaiables > variable = "ACTIONS_STEP_DEBUG" value = "true"
        * secrets and vairables > variable= "ACTIONS_RUNNER_DEBUG"  value = true
        * these will add more logs to our log archive and log files
        * 
    
-------------------------------------------------------------------    
*****
Skip Workflow to run
    if in commit message
    git commit -m "message [The_string]"
    [The_string] = actions skip, skip ci, ci skip, no ci
    if this is the message with the string, it will skip the run of the recent commit.


***** 
WORKFLOW COMMANDS:

?>>>>
name: Workflow Commands
on: [push]

jobs:
    testing-wf-commands:                #1st job
        runs-on: ubuntu-latest
        steps:     
            - name: Setting an error message        
              run: echo "::error::Missing semicolon"        #::error:: is the code to display error message. This does not let the workflow fail.
            - name: setting error message with parameters
              run: echo "::error title:Error title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<Errormessage>"                                            #the error message can be = missing semicolon   -->these are all just echos, to let run the workflow. In this task of the job we are declaring 
            - name: setting debug message with parameters
              run: echo "::debug title:debug title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<DebugMessage>"
            - name: setting warning message with parameters
              run: echo "::warning title:warning title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<WarningMessage>"
            - name: setting notice message with parameters
              run: echo "::notice title:notice title, file=<file name>, line=<specify line no.> ,endLine=<line number>, col=<column>, endColumn=<>::<NoticeMessage>" 
              
            - name: group of logs                                          #to display group of messages,
               run: |
                echo "::group::My group title"
                echo "Inside group"
                echo "::endgroup::"                                        #this is the end, so whatever in between group and endgroup can be seen from dropdown in github webapp logs.
            - name: masking a value                                                 # like masking a string that is sensitive and not to be displayed in logs
              run: echo "::add-mask::Secret String here"
            - name: Echo the secret string
              run: echo "Secret String here"

-------------------------------------------------------------------    

diefference between workflow run, job run , and attempt in gh actions
In GitHub Actions, the terms workflow run, job run, and attempt refer to different levels of execution within a workflow:

Workflow Run: This is the highest level of execution. A workflow run represents the entire execution of a workflow triggered by an event (e.g., a push to a repository). It includes all the jobs that are defined in the workflow2.

Job Run: A workflow run consists of one or more jobs. Each job represents a set of steps that run in a specific environment (e.g., Ubuntu, Windows)3. Jobs can run in parallel or sequentially, depending on how they are defined.

Attempt: Within a job run, there can be multiple attempts. An attempt represents a single execution of the job3. If a job fails and is retried, each retry is considered a separate attempt

>>>>>>>>>
                
                example to illustrate the hierarchy:
                
                Workflow Run: Triggered by a push event.
                
                    Job Run 1: Runs on Ubuntu.
                    
                        Attempt 1: First execution of the job.
                        
                        Attempt 2: Retry of the job after a failure.
                    
                    Job Run 2: Runs on Windows.
                    
                        Attempt 1: First execution of the job

-------------------------------------------------------------------    
SIMPLE ACTIONS>>>

name:
on:
jobs:
    jobs_simple-actions:
        runs-on: 
        steps:
            - name: SIMPLE ACTION
              id: <any varaible name eg. greet>             # this is to refrence this task's output of action to be used by another task
              uses:                                         #instead of run we use 'uses' in order to use the pre defined or made action blocks, 
                                                            # format:::   is private repo or your own repo--> just refrence the path  like .github/actions/<>
                                                            # or if is public --> from Github Actions  Place refrenced as - actions
                                                            # and then the repo and then @ then the commit id, specific version, branch name, or a tag or version
                                                            # for eg. --> uses: actions/hello-world-javascript-action@v1 , or actions/hello-world-javascript-action@v1.1.2 or actions/hello-world-javascript-action@<commit id> or actions/hello-world-javascript-action@main the branch    --> branch is least stable, specifing version or commid id is more stable
              
              with:                                         # this keyword used to specify actions to recieve inputs --> we can find all required inputs filed, the output result in documented in the respective repo. 
            - name: SIMPLE ACTION OUT
              run: echo " this is result: ${{ steps.greet.outputs.time }}"     # here we are refrenceing the output for the actions using
                                                                               # greet -> the id, outputs -> function or the next step. time -> the output variable in this case.




>>>> so the actual action goes like
name: actions workflow
on: [push]
jobs: 
    simple-actions-job:
        runs-on: ubuntu-latest
        steps:
            - name: simple action
              id: var_greet
              uses: actions/hello-world-javascript-action@v1
              with:
                who-to-greet: PRAVAR
            - name: output
              run: echo "result= ${{ steps.var_greet.outputs.time }}
####
The issues in this case runs the workflow all the time, either issue, openend, closed>  can define the activity type to specify when to run the issue.
>> can be defined by::
    on:
        issues:
            - opened
            - edited
            - reopened
            - closed
            - unlocked, milestone, locked, assigned....
            - deleted
by default: its all
################################
>>> pull_request_target

    name: pull request comment 
    on: 
        pull_request_target:
            types: [opened]
    jobs:
        pr-comment:
            runs-on: ubuntu-latest 
            steps:
                - name comment on new PRs
                  uses: actions/github-script@v6
                  with:
                      script: |
                        github.rest.issues.createComment({
                            owner: context.repo.owner,
                            repo: context.repo ,
                            issue_number: context.issues.number ,
                            body: 'Thanks for contributing',
                        )};
                          
-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    

-------------------------------------------------------------------    




